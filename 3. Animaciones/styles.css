*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    background-color: rgb(47, 199, 151);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    height: 100vh;
    display: flex;
    color: white;
}

.cody{
    width: 400px;
    display: block;
    margin: 0 auto;

    /* Primero debemos poner la propiedad en el elemento que sufrira la animacion 
    Las animaciones deben llamar a un elemento llamado keyframes*/
    animation-name: giraCody;
    animation-duration: 1000ms;
    animation-delay: 0;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-play-state: running;
    animation-fill-mode: both;
}

/* SHORTHAND ANIMATION 
 animation-name: Es el nombre del keyframe que animara al elemento, se pueden poner varios seguidos de coma
 animation-duration: Tiempo de la animacion pueden ser segundos  o milisegundos
 animation-delay: Define el tiempo de espera para que se ejecute una animacion, default = 0 
 animation-iteration-count: Define cuantas veces se repetira la animacion, pueder ser infinita
 animation-direction: Define la direccion de la animacion, default : from a to , pero podemos decirle  que sea reverse o alternate para que no sea de golpe el cambio
 animation-fill-mode: Define los estilos antes y despues de la animacion, default: None
 animation-play-state: Define la forma de animarse, puede ser running, paused
 animation-timing-function: Son los mismos valores de transition

 Para que funcione el shorthand debe tener el name y el duration obligatorio, el primer tiempo sera la duracion el 2do sera el delay
 
 animation: 1s 2s infinite alternate both linear giraCody;

 */

 .cody:hover{
    animation-play-state: paused;

 }

.texts{
    text-align: center;
    margin: auto;

}

.title{
    clip-path: polygon(0 0, 0 0, 0 100%, 0 100%);
    animation: show 3s forwards infinite alternate;
}

@keyframes giraCody{

    /* From indica los estilos iniciales y to los valores finales */
    from{
        transform: translateY(-30%) rotate(10deg) scale(.8);
    
    }

    to{
        opacity: 1;
    }

    /* Otra forma de especificar son los porcentajes: 
    
    10%{
        background:red;
    }

    30%{
        background:green;

    }

    */

}


@keyframes show{


    to{
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
        color: rgb(2, 48, 22);
    }
}

/* Para aprender mas de clip path https://bennettfeely.com/clippy/ */